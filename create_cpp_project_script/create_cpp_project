create_cpp_project() {

rm -rf *
rm -rf .*

mkdir src && cd src
mkdir main && mkdir funcs && mkdir tests
cd main && echo "
cc_binary(
    name = \"cpp_app\",
    srcs = [\"main.cpp\"],
    deps = [\"//src/funcs:funcs\"]
)
"> BUILD && echo "
#include \"../funcs/funcs.hpp\"


int main()
{
    std::cout << \"Hello world!\" << std::endl;
    return 0;
}

"> main.cpp && cd ..
cd funcs && echo "
cc_library(
    name = \"funcs\",
    srcs = [\"funcs.cpp\"],
    hdrs = [\"funcs.hpp\"],
    visibility = [\"//visibility:public\"]
)
"> BUILD && echo "
#ifndef FUNCS_HPP
#define FUNCS_HPP
#include<iostream>

#endif //FUNCS_HPP

"> funcs.hpp && echo "
#include \"funcs.hpp\"
" > funcs.cpp && cd ..
cd tests && echo "
cc_test(
    name = \"tests\",
    srcs = [\"testFuncs.cpp\"],
    deps = [
        \"@googletest//:gtest_main\",
        \"//src/funcs:funcs\"
    ]
)

" > BUILD && echo "
#include <stdexcept>
#include <gtest/gtest.h>
#include \"../funcs/funcs.hpp\"


TEST(testCase, testName) 
{
    EXPECT_EQ(1, 1);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
"> tests.cpp && cd ..
cd ..

echo "

# Enable Bzlmod for every Bazel command

build --action_env=CC=clang
build --action_env=CXX=clang++

build --cxxopt='-std=c++20'
test --cxxopt='-std=c++20'

# debug config
build:debug --compilation_mode=dbg

# release config
build:release --compilation_mode=opt


build --copt=\"--language=c++\"
test --copt=\"--language=c++\"

build --copt=\"-fdiagnostics-color=always\"

# Use colors to highlight output on the screen. Set to \`no\` if your CI does not display colors.
# Docs: https://bazel.build/docs/user-manual#color
build --color=yes
test --color=yes

# Promote unused result and variable warnings to errors.
# build --cxxopt='-Werror=unused-result'
# test --cxxopt='-Werror=unused-result'
# build --cxxopt='-Werror=unused-variable'
# test --cxxopt='-Werror=unused-variable'
    
" > .bazelrc
echo "
module(
    name = \"cpp_app\",
    repo_name = \"cpp_app\",
    version = \"1.0\",
    compatibility_level = 1
)

bazel_dep(name = \"googletest\", version = \"1.14.0\")
"> MODULE.bazel
touch WORKSPACE

mkdir .vscode && cd .vscode

echo "
{
    \"telemetry.telemetryLevel\": \"off\",

    \"editor.tabSize\": 4,
    \"editor.insertSpaces\": true,
    \"editor.formatOnSave\": false,

    \"workbench.colorTheme\": \"Default Dark+\",
    \"editor.fontFamily\": \"Consolas\",
    \"editor.fontSize\": 13,

    \"code-runner.runInTerminal\" : true,
    \"code-runner.showExecutionMessage\": false,
    \"code-runner.clearPreviousOutput\": true,

    \"workbench.editor.highlightModifiedTabs\": true,
    
    \"files.trimFinalNewlines\": true,

    \"explorer.sortOrder\": \"default\",

    \"files.autoSave\": \"onFocusChange\",

    \"C_Cpp.default.cppStandard\": \"c++20\"
}

" > settings.json
echo "
{
    \"version\": \"2.0.0\",
    \"tasks\": [
        {
            \"label\": \"bazel-build-debug\",
            \"type\": \"shell\",
            \"command\": \"bazel build //src/main:all --config=debug \",
            \"group\": \"build\"
        },
        {
            \"label\": \"bazel-build-release\",
            \"type\": \"shell\",
            \"command\": \"bazel build //src/main:all --config=release \",
            \"group\": \"build\"
        },
        {
            \"label\": \"bazel-test\",
            \"type\": \"shell\",
            \"command\": \"bazel test //src/tests:all --test_output=all --nocache_test_results || [ $? -eq 3 ] && exit 0\", 
            \"group\": \"test\"
        },
        // this test, del this next
        {
            \"label\": \"test-tasks\",
            \"type\": \"shell\",
            \"command\": \"ls\",
        }

    ]
}
"> tasks.json
echo "
{
    \"version\": \"0.2.0\",
    \"configurations\": [
        {
            \"name\": \"Bazel Debug\",
            \"type\": \"cppdbg\",
            \"request\": \"launch\",
            \"program\": \"\${workspaceFolder}/bazel-bin/src/main/cpp_app\",
            \"args\": [],
            \"stopAtEntry\": false,
            \"cwd\": \"\${workspaceFolder}\",
            \"environment\": [],
            \"externalConsole\": false,  
            \"MIMode\": \"gdb\",
            \"miDebuggerArgs\": \"-q -ex quit; wait() { fg >/dev/null; }; /bin/gdb -q --interpreter=mi\",
            \"miDebuggerPath\": \"gdb\",
            \"setupCommands\": [
              {
                  \"description\": \"Enable pretty-printing for gdb\",
                  \"text\": \"-enable-pretty-printing\",
                  \"ignoreFailures\": true
              }
            ],
            \"preLaunchTask\": \"bazel-build-debug\"
        },
	{
            \"name\": \"Bazel Release\",
            \"type\": \"cppdbg\",
            \"request\": \"launch\",
            \"program\": \"\${workspaceFolder}/bazel-bin/src/main/cpp_app\",
            \"args\": [],
            \"stopAtEntry\": false,
            \"cwd\": \"\${workspaceFolder}\",
            \"environment\": [],
            \"externalConsole\": false,
            \"MIMode\": \"gdb\",
            \"miDebuggerArgs\": \"-q -ex quit; wait() { fg >/dev/null; }; /bin/gdb -q --interpreter=mi\",
            \"preLaunchTask\": \"bazel-build-release\" 
        },
        {
            \"name\": \"Bazel Test\",
            \"type\": \"cppdbg\",
            \"request\": \"launch\",
            \"program\": \"\${workspaceFolder}/bazel-bin/src/tests/tests\",
            \"args\": [],
            \"stopAtEntry\": false,
            \"cwd\": \"\${workspaceFolder}\",
            \"externalConsole\": false,
            \"miDebuggerArgs\": \"-q -ex quit; wait() { fg >/dev/null; }; /bin/gdb -q --interpreter=mi\",
            \"preLaunchTask\": \"bazel-test\"
        }
    ]
 }
" > launch.json
echo "
{
    \"configurations\": [
        {
            \"name\": \"Linux\",
            \"includePath\": [
                \"\${workspaceFolder}/bazel-bin/**\",
                \"\${workspaceFolder}/bazel-out/**\",
                \"\${workspaceFolder}/bazel-\${workspaceFolderBasename}/**\"
            ],
            \"intelliSenseMode\": \"\${default}\",
            \"cppStandard\": \"c++20\"
        }
    ],
    \"version\": 4
}
" > c_cpp_properties.json

cd ..

bazel build //src/main:cpp_app
}
